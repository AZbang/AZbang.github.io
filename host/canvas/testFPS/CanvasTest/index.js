// Generated by CoffeeScript 1.10.0
(function() {
  window.onload = function() {
    var Rect, bodies, box, canvas, ctx, lastLoop, tick;
    Rect = (function() {
      function Rect(ctx, config) {
        var ref, ref1, ref2, ref3, ref4;
        this.ctx = ctx;
        this.x = (ref = config.x) != null ? ref : 0;
        this.y = (ref1 = config.y) != null ? ref1 : 0;
        this.w = (ref2 = config.w) != null ? ref2 : 50;
        this.h = (ref3 = config.h) != null ? ref3 : 50;
        this.angle = (ref4 = config.angle) != null ? ref4 : 0;
        this.img = config.img;
      }

      Rect.prototype.update = function(dt) {
        return this.angle += 0.1;
      };

      Rect.prototype.draw = function() {
        this.ctx.save();
        this.ctx.translate(this.x + this.w / 2, this.y + this.h / 2);
        this.ctx.rotate(this.angle);
        this.ctx.drawImage(this.img, -this.w, -this.h, this.w, this.h);
        return this.ctx.restore();
      };

      return Rect;

    })();
    canvas = document.getElementById("paper");
    ctx = canvas.getContext("2d");
    canvas.width = 1000;
    canvas.height = 800;
    bodies = [];
    box = document.getElementById("box");
    setInterval(function() {
      var config;
      config = {
        x: Math.floor(Math.random() * canvas.width),
        y: Math.floor(Math.random() * canvas.height),
        img: box
      };
      return bodies.push(new Rect(ctx, config));
    }, 10);
    lastLoop = new Date;
    tick = function() {
      var fps, i, j, len, len1, rect, thisLoop;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      thisLoop = new Date;
      fps = Math.floor(1000 / (thisLoop - lastLoop));
      lastLoop = thisLoop;
      for (i = 0, len = bodies.length; i < len; i++) {
        rect = bodies[i];
        rect.update();
      }
      for (j = 0, len1 = bodies.length; j < len1; j++) {
        rect = bodies[j];
        rect.draw();
      }
      ctx.font = "30px Arial";
      ctx.fillStyle = "red";
      ctx.fillText("FPS: " + fps + "   COUNT OBJECTS: " + bodies.length, 10, 50);
      return requestAnimationFrame(tick);
    };
    return tick();
  };

}).call(this);
